using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MEDAS
{
    public partial class winShow : Form
    {
        MainClass mc = new MainClass();
        public winShow()
        {
            InitializeComponent();
        }


        private void button1_Click(object sender, EventArgs e)
        {
            //short[] tta = new short[] { 0x4F60, 0x7D59 };
            //string a = Encoding.GetEncoding("GB2312").GetString(tta);

            //string frames
            //byte[] framesByte = ToolAPI.ConvertData.HexToByte(frames);
            //Bm200.ProtocolAnalysis(framesByte,"");


            //string frames
            //byte[] framesByte = ToolAPI.ConvertData.HexToByte(frames);
            //Bm21B.ProtocolAnalysis(framesByte,"");

            #region 测试
           // 软件安装验证
            //DataUpload.VerifyAsyn();
           // 设备监控
            //DataUpload.MonitorAsyn("10001", "RK-73106856");
            //上报数据
            //string frames
            //byte[] framesByte = ToolAPI.ConvertData.HexToByte(frames);
            //BC_1800.ProtocolAnalysis(framesByte, "RK-73106856");
            //版本号
            //DataUpload.VersionAsyn();

            #endregion
            mc.Start();
        }

        private void button2_Click(object sender, EventArgs e)
        {
            mc.Stop();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            byte[] ping = new byte[] { 0xCD,0xF5,0xCE,0xE5 };
            string abc = Encoding.ASCII.GetString(ping);
            string abc1 = Encoding.BigEndianUnicode.GetString(ping);
            string abc2 = Encoding.Default.GetString(ping);
            string abc3 = Encoding.Unicode.GetString(ping);
            string abc4 = Encoding.UTF32.GetString(ping);
            string abc5 = Encoding.UTF7.GetString(ping);
            string abc6 = Encoding.UTF8.GetString(ping);

            string a = "CDF5CEE5";
            string result = HexStringToAsciiString(a);
            string result1 = HexStringToUTFString(a);
        }
        private static string HexStringToAsciiString(string DesString)
        {
            try
            {
                byte[] MDByteAry = ToolAPI.ConvertData.HexToByte(DesString);
                return Encoding.ASCII.GetString(MDByteAry);
            }
            catch (Exception) { return ""; }
        }
        private static string HexStringToUTFString(string DesString)
        {
            try
            {
                byte[] MDByteAry = ToolAPI.ConvertData.HexToByte(DesString);
                return Encoding.UTF8.GetString(MDByteAry);
            }
            catch (Exception) { return ""; }
        }
    }
}
